buildscript {
    repositories {
        mavenCentral()
        // The following is only necessary if you want to use SNAPSHOT releases.
        // maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0'
    }
}

repositories {
    mavenCentral()
}

ext.junit4Version        = '4.12'
ext.junitVintageVersion  = '4.12.0'
ext.junitPlatformVersion = '1.0.0'
ext.junitJupiterVersion  = '5.0.0'


apply plugin: 'java'
apply plugin: 'org.junit.platform.gradle.plugin'

group 'com.tarrega'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

junitPlatform {
    // platformVersion '1.0.0'
    filters {
        engines {
            // include 'junit-jupiter', 'junit-vintage'
            // exclude 'custom-engine'
        }
        tags {
            // include 'fast'
            exclude 'slow'
        }
        // includeClassNamePattern '.*Test'
    }
    // configurationParameter 'junit.jupiter.conditions.deactivate', '*'
    // enableStandardTestTask true
    // reportsDir file('build/test-results/junit-platform') // this is the default
}


dependencies {
    // for junit5
    testCompile("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")

    // for junit5 parameterized tests(currently an experimental feature.)
    testCompile("org.junit.jupiter:junit-jupiter-params:${junitJupiterVersion}")

    // 3rd-party
    testCompile group: 'org.hamcrest', name: 'hamcrest-core', version: '1.3'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.10.0'

    // needs below additional dependencies for using JUnit 4 to Run the JUnit Platform
    //testCompile("junit:junit:${junit4Version}")
    //testRuntime("org.junit.platform:junit-platform-runner:${junitPlatformVersion}")
    testRuntime("org.junit.platform:junit-platform-runner:${junitPlatformVersion}")

    // If you also want to support JUnit 3 and JUnit 4 tests
    //testCompile("junit:junit:${junit4Version}")
    //testRuntime("org.junit.vintage:junit-vintage-engine:${junitVintageVersion}")
}